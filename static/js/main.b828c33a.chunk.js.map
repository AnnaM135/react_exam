{"version":3,"sources":["store/addQuestion/action.js","components/AddQuestion.jsx","components/Quesstion.jsx","components/TopQuestions.jsx","store/addQuestion/reducer.js","store/redusers.js","App.js","serviceWorker.js","index.js"],"names":["changeInp","t","v","type","value","AddQuestion","props","state","userInput","id","question","category","answers","answer","likes","error","e","k","target","getAttribute","this","setState","add","i","result","addData","questions","push","history","replace","className","onChange","change","bind","data-id","onClick","save","Component","connect","addReducer","Quesstion","newAnswer","a","n","res","dis","console","log","plus","data","map","key","d","action","htmlFor","TopQuestions","to","path","exact","render","globalState","combineReducers","store","createStore","reducers","App","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b828c33a.chunk.js","sourcesContent":["export default function changeInp(t, v){\r\n    return{\r\n        type: t,\r\n        value: v\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport changeInp from \"../store/addQuestion/action\"\r\n\r\nclass AddQuestion extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            userInput: {\r\n                id: \"\",\r\n                question: \"\",\r\n                category: \"\",\r\n                answers: [\r\n                    {\r\n                        id: \"\",\r\n                        answer: \"\",\r\n                        likes: \"\"\r\n                    }\r\n                ]\r\n            },\r\n                \r\n            \r\n             error: \"\"\r\n        }\r\n    }\r\n    \r\n    change(e){\r\n        let k = e.target.getAttribute('data-id')\r\n        this.state.userInput[k] = e.target.value\r\n        this.setState({})\r\n    }\r\n    save(){\r\n        let add = this.state.userInput\r\n        this.state.error = \"\"\r\n        for(let i in add){\r\n            if(add[i] === \"\"){\r\n                this.state.error = \"fill the fields\"\r\n                this.setState({})\r\n            }\r\n        }\r\n        this.setState({})\r\n        if(this.state.error === \"\"){\r\n           let result = this.props.addData.questions.push(this.state.userInput)\r\n            this.props.changeInp(\"save\", result)\r\n            this.props.history.replace(\"/top\")\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h4 className = \"text-danger \">{this.state.error}</h4>\r\n                <div className = \"w-25 mx-auto alert-info p-3\">          \r\n                     <h1>Add your question.</h1>\r\n                        Id: <input value = {this.state.userInput.id} onChange = {this.change.bind(this)} data-id = \"id\" type = \"text\"  className = \"form-control\"/>                        \r\n                        Your Question: <input value = {this.state.userInput.question} onChange = {this.change.bind(this)} data-id = \"question\" type = \"text\"  className = \"form-control\"/>\r\n                        Category: <input value = {this.state.userInput.category} onChange = {this.change.bind(this)} data-id = \"category\" type = \"text\"  className = \"form-control\"/>\r\n                    \r\n                    <button onClick = {this.save.bind(this)}  className= \"btn btn-info\">Save</button> \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n        addData: state.addReducer\r\n    }\r\n}\r\nfunction mapDispatchToProps(){\r\n    return{\r\n        changeInp\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps()) (AddQuestion)\r\n","import React, { Component } from 'react'\r\n\r\nclass Quesstion extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             newAnswer: []\r\n        }\r\n    }\r\n    \r\n    \r\n    change(e){\r\n        let k = e.target.getAttribute('data-id')\r\n        this.state.newAnswer = e.target.value\r\n        this.setState({})\r\n    }\r\n    add(a, i){\r\n        let n = this.state.newAnswer\r\n        \r\n        let res = a.answers.push(n)\r\n        this.props.dis(\"add\", res)\r\n        this.setState({})\r\n        console.log(res)\r\n     }\r\n     likes(k){\r\n         let plus = k.likes++\r\n        this.props.dis(\"likes\", plus)\r\n         this.setState({})\r\n     }\r\n    render() {\r\n        console.log(this.props.data.questions[0])\r\n        return (\r\n            <div>\r\n              <h1 className = \"alert-danger\">All Questions</h1>\r\n                {\r\n                    this.props.data.questions.map((a,i) =>(\r\n                        <div key = {i}>\r\n                            <h1 className = \"alert-dark\">{a.question}</h1>\r\n                            <h3>{a.category}</h3>\r\n                            {\r\n                                a.answers.map((k,d) => (\r\n                                    <div key = {d}>\r\n                                        <h1 className = \"alert-info\">{k.answer}</h1>\r\n                                        <button onClick = {this.likes.bind(this, k, i)} className = \"btn btn-info\">Likes - {k.likes}</button>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                            <form action=\"/action_page.php\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"text\">Questions Id:</label>\r\n                                    <input data-id = \"id\" value = {a.id} onChange = {this.change.bind(this)} type=\"text\" className=\"form-control\" id=\"text\"/>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"text\">Enter Answer:</label>\r\n                                    <input data-id = \"newAnswer\" value = {this.state.newAnswer} onChange = {this.change.bind(this)} type=\"text\" className=\"form-control\" id=\"text\"/>\r\n                                </div>\r\n                            </form>\r\n                            <button onClick = {this.add.bind(this, a, i)}  className=\"btn btn-success\">Add Answer</button>\r\n                        \r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quesstion\r\n","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport changeInp from \"../store/addQuestion/action\"\r\nimport { BrowserRouter, Link, Route } from \"react-router-dom\"\r\nimport Quesstion from './Quesstion';\r\n\r\n\r\nclass TopQuestions extends Component {\r\n    render() {\r\n        console.log(this.props)\r\n        return (\r\n            <BrowserRouter>\r\n                <table className = \"table table-blocked alert-warning\">\r\n                    <thead>\r\n                        {\r\n                            this.props.addData.questions.map((a, i) => (\r\n                                <tr key = {i}>\r\n                                    <Link to = \"/top/question\"><td>{a.question}</td></Link>\r\n                                    <td>{a.category}</td>\r\n                                    {/* <Link to = \"/top/question\"><td>{a.question[i]}</td></Link>\r\n                                    <td>{a.category[i]}</td> */}\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </thead>\r\n                </table>\r\n\r\n                <Route path = \"/top/question\" exact  render = {(props) =>(<Quesstion data = {this.props.addData} dis = {this.props.changeInp} />)} />\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n      \r\nfunction mapStateToProps(state){\r\n    return{\r\n        addData: state.addReducer\r\n    }\r\n}\r\nfunction mapDispatchToProps(){\r\n    return{\r\n        changeInp\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps()) (TopQuestions)\r\n","let globalState = {\r\n    questions: [\r\n        {\r\n            id: 259,\r\n            question: \"What is React?\",\r\n            category: \"React\",\r\n            answers: [\r\n                {\r\n                    id: 23,\r\n                    answer: \"React is a JS library\",\r\n                    likes: 3\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            id: 260,\r\n            question: \"How to declare variables in JS?\",\r\n            category: \"Js\",\r\n            answers: [\r\n                {\r\n                    id: 24,\r\n                    answer: \"var, let\",\r\n                    likes: 3\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nexport default function addReducer(state = globalState, action){\r\n    switch(action.type){\r\n        case \"save\": return{\r\n            ...state,\r\n            questions: [...state.questions]\r\n        }\r\n        case \"add\": return{\r\n            ...state,\r\n            answers: action.value\r\n        }\r\n        case \"likes\": return{\r\n            ...state,\r\n            likes: action.value\r\n        }\r\n    }\r\n    return state\r\n}","import addReducer from \"./addQuestion/reducer\"\r\nimport {combineReducers} from \"redux\"\r\n\r\nexport default  combineReducers({\r\n    addReducer\r\n})","import React, { Component } from 'react';\nimport { BrowserRouter, Link, Route } from \"react-router-dom\"\nimport AddQuestion from './components/AddQuestion';\nimport TopQuestions from './components/TopQuestions';\nimport {createStore} from \"redux\"\nimport {Provider} from \"react-redux\"\nimport reducers from \"./store/redusers\"\n\nlet store = createStore(reducers) \n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store = {store}>\n      <BrowserRouter>\n      <h1>Hello!</h1>\n        <nav className=\"navbar navbar-expand-sm bg-light\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item\">\n            <Link className=\"nav-link\" to = \"/add\">Add Question</Link>\n            </li>\n            <li className=\"nav-item\">\n            <Link className=\"nav-link\" to = \"/top\">Top Questions</Link>\n            </li>\n          </ul>\n        </nav>\n        <Route path = \"/add\" component = {AddQuestion}/>\n        <Route path = \"/top\"  component = {TopQuestions} />\n      </BrowserRouter>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}